# Git aliases
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
[alias]
a = commit --amend
br = branch
c = commit
ca = !git add -A && git commit # Commit all changes.
co = checkout
cp = cherry-pick
d = diff -- . ':!*package-lock.json' ':!*yarn.lock'
dc = diff --cached -- . ':!*package-lock.json' ':!*yarn.lock'
f = fetch
g = log --graph --pretty=custom            # Show custom graph.
git = !exec git                            # Allow `$ git git git...`
l = log --pretty=custom                    # Show custom log.
lc = shortlog --email --numbered --summary # List contributors.
p = push
r = rebase
w = instaweb --httpd=webrick # Start web-based visualizer.
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Setup a new repo and add files to it (Requires my scripts to be installed).
setup = !"f() { gitadmin setup "$@" ; }; f"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
slog = log --graph --all --topo-order --pretty='format:%h %ai %s%d (%an)'
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
s = "!f(){ git status -s -b; };f"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#s = "!f() { \
#  if [ $(git status | grep clean >/dev/null 2>&1) ]; then \
#    echo -e \"\033[0;31m\t\tThere are changes pending\n\033[0m\" \
#  else \
#    echo -e \"\033[0;32m\t\tThere is nothing to commit\n\033[0m\" \
#  fi \
#; }; f"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
new = "!f(){ git init && git symbolic-ref HEAD refs/heads/main; };f"
update = "!f(){ git checkout master; git branch -m master main; git fetch; git branch --unset-upstream; git branch -u origin/main; };f"
master2main = "!f(){ git branch -m master main; git checkout main; git push -u origin main; git push origin --delete master; };f"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# branching
rmbranch = "!f(){ git branch -d ${1} && git push origin --delete ${1}; };f"
mkbranch = "!f(){ git checkout -b ${1} && git push origin -u ${1}; };f"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#
unfuck = "!f(){ git reset --hard origin/$(git rev-parse --abbrev-ref HEAD); rm -fv $(git st | grep ^? | cut -d' ' -f2-); }; f"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# pull and update everything
smsa = "!f() { git submodule foreach 'git fetch origin --tags; git checkout master; git pull' && git pull && git submodule update --init --recursive; }; f"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# emojify git log
emj = "!f() { git log --color | emojify ; }; f"
log = "!f() { git log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(red)%h%C(r) —— %C(bold blue)%an%C(r): %C(white)%s%C(r) %C(dim white) %C(bold green)(%ar)%C(r) %C(bold yellow)%d%C(r)' --all ;} f"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Find commits by source code.
cc = "!f() { git log --pretty=custom --decorate --date=short -S\"$1\"; }; f"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Remove the tag with the specified tag name if exists and tag the latest commit with that name.
retag = "!f() { git tag -d "$1" &> /dev/null; git tag $1; }; f"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Remove last commits (by default it removes the last commit).
rlc = "!f() { declare n=\"${1:-1}\"; git reset --hard \"HEAD~$n\"; }; f"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Undo last commits (by default it undoes the last commit).
ulc = "!f() { declare n=\"${1:-1}\"; git reset --soft \"HEAD~$n\"; }; f"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Find commits by commit message.
cm = "!f() { git log --pretty=custom --decorate --date=short --grep=\"$1\"; }; f"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Credit an author on the latest commit.
credit = "!f() { if [ -n \"$1\" ] && [ -n \"$2\" ]; then git commit --amend --author \"$1 <$2>\" -C HEAD; fi; }; f"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Credit a co-author on the latest commit.
credit-co-author = "!f() { if [ -n \"$1\" ] && [ -n \"$2\" ]; then GIT_EDITOR=\"git interpret-trailers --in-place --trailer='Co-authored-by: $1 <$2>'\" git commit --amend; fi; }; f"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# List remote branches.
lrb = "!f() { remote="${1:-origin}"; git ls-remote --heads "$remote"; }; f"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# github repos (Requires my scripts to be installed).
ghm = "!f() { gitadmin github init "$1" ; }; f"
ghc = "!f() { gitadmin github clone "$1" ; }; f"
ghr = "!f() { gitadmin github remote "$1" ; }; f"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# gitlab repos (Requires my scripts to be installed).
glm = "!f() { gitadmin gitlab init "$1" ; }; f"
glc = "!f() { gitadmin gitlab clone "$1" ; }; f"
glr = "!f() { gitadmin gitlab remote "$1" ; }; f"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# private repos (Requires my scripts to be installed).
glm = "!f() { gitadmin private init "$1" ; }; f"
gpc = "!f() { gitadmin private clone "$1" ; }; f"
gpr = "!f() { gitadmin private remote "$1" ; }; f"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Create new site from theme (Requires my scripts to be installed).
newsite = "!f() { gitadmin newsite "$1" ; }; f"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# generate gitignore (Requires my scripts to be installed).
gi = "!f() { gitignore "$@" ; }; f"
ignore = "!f() { gitignore "$@" ; }; f"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Merge GitHub pull request on top of the current branch or,
# if a branch name is specified, on top of the specified branch.
mpr = "!f() { \
    declare currentBranch=\"$(git symbolic-ref --short HEAD)\"; \
    declare branch=\"${2:-$currentBranch}\"; \
    if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
        git fetch origin refs/pull/$1/head:pr/$1 && \
        git checkout -B $branch && \
        git rebase $branch pr/$1 && \
        git checkout -B $branch && \
        git merge pr/$1 && \
        git branch -D pr/$1 && \
        git commit --amend -m \"$(git log -1 --pretty=%B)\n\nClose #$1\"; \
    fi \
}; f"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# chart: show a summary chart of activity per author.
  chart = "!f() { \
    git log \
    --format=oneline \
    --format=\"%aE %at\" \
    --since=6-weeks-ago \
    $* | \
    awk ' \
    function time_to_slot(t) { return strftime(\"%Y-%m-%d\", t, true) } \
    function count_to_char(i) { return (i > 0) ? ((i < 10) ? i : \"X\") : \".\" } \
    BEGIN { \
      time_min = systime(); time_max = 0; \
      SECONDS_PER_DAY=86400; \
    } \
    { \
      item = $1; \
      time = 0 + $2; \
      if (time > time_max){ time_max = time } else if (time < time_min){ time_min = time }; \
      slot = time_to_slot(time); \
      items[item]++; \
      slots[slot]++; \
      views[item, slot]++; \
    } \
    END{ \
      printf(\"Chart time range %s to %s.\\n\", time_to_slot(time_min), time_to_slot(time_max)); \
      time_max_add = time_max += SECONDS_PER_DAY; \
      for(item in items){ \
        row = \"\"; \
        for(time = time_min; time < time_max_add; time += SECONDS_PER_DAY) { \
          slot = time_to_slot(time); \
          count = views[item, slot]; \
          row = row count_to_char(count); \
        } \
        print row, item; \
      } \
    }'; \
  }; f"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Show a specific format string and its number of log entries
log-of-format-and-count = "!f() { format=\"$1\"; shift; git log $@ --format=oneline --format="$format" | awk '{a[$0]++}END{for(i in a){print i, a[i], int((a[i]/NR)*100) \"%\"}}' | sort; }; f"
log-of-count-and-format = "!f() { format=\"$1\"; shift; git log $@ --format=oneline --format="$format" | awk '{a[$0]++}END{for(i in a){print a[i], int((a[i]/NR)*100) \"%\", i}}' | sort -nr; }; f"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Show the number of log entries by a specific format string and date format string
log-of-format-and-count-with-date = "!f() { format=\"$1\"; shift; date_format=\"$1\"; shift; git log $@ --format=oneline --format=\"$format\" --date=format:\"$date_format\" | awk '{a[$0]++}END{for(i in a){print i, a[i], int((a[i]/NR)*100) \"%\"}}' | sort -r; }; f"
log-of-count-and-format-with-date = "!f() { format=\"$1\"; shift; date_format=\"$1\"; shift; git log $@ --format=oneline --format=\"$format\" --date=format:\"$date_format\" | awk '{a[$0]++}END{for(i in a){print a[i], int((a[i]/NR)*100) \"%\", i}}' | sort -nr; }; f"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Show the number of log items by email
log-of-email-and-count = "!f() { git log-of-format-and-count \"%aE\" $@; }; f"
log-of-count-and-email = "!f() { git log-of-count-and-format \"%aE\" $@; }; f"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Show the number of log items by hour
log-of-hour-and-count = "!f() { git log-of-format-and-count-with-date \"%ad\" \"%Y-%m-%dT%H\" $@ ; }; f"
log-of-count-and-hour = "!f() { git log-of-count-and-format-with-date \"%ad\" \"%Y-%m-%dT%H\" $@ ; }; f"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Show the number of log items by day
log-of-day-and-count = "!f() { git log-of-format-and-count-with-date \"%ad\" \"%Y-%m-%d\" $@ ; }; f"
log-of-count-and-day = "!f() { git log-of-count-and-format-with-date \"%ad\" \"%Y-%m-%d\" $@ ; }; f"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Show the number of log items by week
log-of-week-and-count = "!f() { git log-of-format-and-count-with-date \"%ad\" \"%Y#%V\" $@; }; f"
log-of-count-and-week = "!f() { git log-of-count-and-format-with-date \"%ad\" \"%Y#%V\" $@; }; f"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Show the number of log items by month
log-of-month-and-count = "!f() { git log-of-format-and-count-with-date \"%ad\" \"%Y-%m\" $@ ; }; f"
log-of-count-and-month = "!f() { git log-of-count-and-format-with-date \"%ad\" \"%Y-%m\" $@ ; }; f"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Show the number of log items by year
log-of-year-and-count = "!f() { git log-of-format-and-count-with-date \"%ad\" \"%Y\" $@ ; }; f"
log-of-count-and-year = "!f() { git log-of-count-and-format-with-date \"%ad\" \"%Y\" $@ ; }; f"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Show the number of log items by hour of day
log-of-hour-of-day-and-count = "!f() { git log-of-format-and-count-with-date \"%ad\" \"%H\" $@; }; f"
log-of-count-and-hour-of-day = "!f() { git log-of-count-and-format-with-date \"%ad\" \"%H\" $@; }; f"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Show the number of log items by day of week
log-of-day-of-week-and-count = "!f() { git log-of-format-and-count-with-date \"%ad\" \"%u\" $@; }; f"
log-of-count-and-day-of-week = "!f() { git log-of-count-and-format-with-date \"%ad\" \"%u\" $@; }; f"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Show the number of log items by week of year
log-of-week-of-year-and-count = "!f() { git log-of-format-and-count-with-date \"%ad\" \"%V\" $@; }; f"
log-of-count-and-week-of-year = "!f() { git log-of-count-and-format-with-date \"%ad\" \"%V\" $@; }; f"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# TODO
log-refs = log --all --graph --decorate --oneline --simplify-by-decoration --no-merges
log-timeline = log --format='%h %an %ar - %s'
log-local = log --oneline origin..HEAD
log-fetched = log --oneline HEAD..origin/master
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# summary: print a helpful summary of some typical metrics
churn = !"f() { git log --all --find-copies --find-renames --name-only --format='format:' \"$@\" | awk 'NF{a[$0]++}END{for(i in a){print a[i], i}}' | sort -rn;};f"
summary = "!f() { \
    printf \"Summary of this branch...\n\"; \
    printf \"%s\n\" $(git rev-parse --abbrev-ref HEAD); \
    printf \"%s first commit timestamp\n\" $(git log --date-order --format=%cI | tail -1); \
    printf \"%s latest commit timestamp\n\" $(git log -1 --date-order --format=%cI); \
    printf \"%d commit count\n\" $(git rev-list --count HEAD); \
    printf \"%d date count\n\" $(git log --format=oneline --format=\"%ad\" --date=format:\"%Y-%m-%d\" | awk '{a[$0]=1}END{for(i in a){n++;} print n}'); \
    printf \"%d tag count\n\" $(git tag | wc -l); \
    printf \"%d author count\n\" $(git log --format=oneline --format=\"%aE\" | awk '{a[$0]=1}END{for(i in a){n++;} print n}'); \
    printf \"%d committer count\n\" $(git log --format=oneline --format=\"%cE\" | awk '{a[$0]=1}END{for(i in a){n++;} print n}'); \
    printf \"%d local branch count\n\" $(git branch | grep -v \" - >\" | wc -l); \
    printf \"%d remote branch count\n\" $(git branch -r | grep -v \" - >\" | wc -l); \
    printf \"\nSummary of this directory...\n\"; \
    printf \"%s\n\" $(pwd); \
    printf \"%d file count via git ls-files\n\" $(git ls-files | wc -l); \
    printf \"%d file count via find command\n\" $(find . | wc -l); \
    printf \"%d disk usage\n\" $(du -s | awk '{print $1}'); \
    printf \"\nMost-active authors, with commit count and %%...\n\"; git log-of-count-and-email | head -7; \
    printf \"\nMost-active dates, with commit count and %%...\n\"; git log-of-count-and-day | head -7; \
    printf \"\nMost-active files, with churn count\n\"; git churn | head -7; \
  }; f"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
